namespace {
    const float offsetVal = 1.0 / 300.0;
    const float sharpenForce = 1.0;
    const float multiplier = -1.0 / 256.0;

    vec4 ApplyKernel(std::Texture2d tex, vec2 UV, vec2 offsets[25], float kernel[25]){
        vec4 fragColor = vec4(0.0);

        for(int i = 0; i < 25; ++i){
            fragColor += tex.sample(UV + offsets[i]) * kernel[i];
        }

        fragColor.a = 1.0;

        return fragColor;
    };
}

vec4 main(std::Texture2d tex) {
    vec2 offsets[25] = {
	    vec2(-offsetVal, offsetVal),
	    vec2(-offsetVal * 2.0 / 3.0, offsetVal),
	    vec2(-offsetVal * 1.0 / 3.0, offsetVal),
        vec2(0.0, offsetVal),
        vec2(offsetVal * 1.0 / 3.0, offsetVal),
        vec2(offsetVal * 2.0 / 3.0, offsetVal),
        vec2(offsetVal, offsetVal),

        vec2(-offsetVal, offsetVal * 2.0 / 3.0),
        vec2(offsetVal, offsetVal * 2.0 / 3.0),

        vec2(-offsetVal, offsetVal * 1.0 / 3.0),
        vec2(offsetVal, offsetVal * 1.0 / 3.0),

        vec2(-offsetVal, 0.0),
        vec2(0.0, 0.0),
        vec2(offsetVal, 0.0),

        vec2(-offsetVal, -offsetVal * 1.0 / 3.0),
        vec2(offsetVal, -offsetVal * 1.0 / 3.0),

        vec2(-offsetVal, -offsetVal * 2.0 / 3.0),
        vec2(offsetVal, -offsetVal * 2.0 / 3.0),

	    vec2(-offsetVal, -offsetVal),
	    vec2(-offsetVal * 2.0 / 3.0, -offsetVal),
	    vec2(-offsetVal * 1.0 / 3.0, -offsetVal),
        vec2(0.0, -offsetVal),
        vec2(offsetVal * 1.0 / 3.0, -offsetVal),
        vec2(offsetVal * 2.0 / 3.0, -offsetVal),
        vec2(offsetVal, -offsetVal)
    };

    float kernel[25] = {
        1.0 * multiplier,
        4.0 * multiplier,
        6.0 * multiplier,
        4.0 * multiplier,
        1.0 * multiplier,

        4.0 * multiplier,
        16.0 * multiplier,
        24.0 * multiplier,
        16.0 * multiplier,
        4.0 * multiplier,

        6.0 * multiplier,
        24.0 * multiplier,
        -476.0 * multiplier,
        24.0 * multiplier,
        6.0 * multiplier,

        4.0 * multiplier,
        16.0 * multiplier,
        24.0 * multiplier,
        16.0 * multiplier,
        4.0 * multiplier,

        1.0 * multiplier,
        4.0 * multiplier,
        6.0 * multiplier,
        4.0 * multiplier,
        1.0 * multiplier
    };

	return ApplyKernel(tex, fragment(std::getVertexTexCoord()), offsets, kernel);
}